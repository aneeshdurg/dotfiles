set nocompatible              " be iMproved, required
filetype off                  " required
set number
set laststatus=2
" set the runtime path to include Vundle and initialize
colorscheme default


" set the runtime path to include Vundle and initialize
" set the runtime path to include Vundle and initialize
" set the runtime path to include Vundle and initialize
set rtp+=$USERPROFILE/vimfiles/bundle/Vundle.vim
call vundle#begin('$USERPROFILE/vimfiles/bundle/Vundle.vim')
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

Plugin 'Valloric/YouCompleteMe'
let g:ycm_autoclose_preview_window_after_completion = 1

Plugin 'tpope/vim-surround'

Plugin 'kien/ctrlp.vim'

Plugin 'nathanaelkane/vim-indent-guides'
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_guide_size = 2
let g:indent_guides_guide_start_level = 1

Plugin 'bling/vim-airline'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = '>'
let g:airline#extensions#tabline#left_alt_sep = '>'

Plugin 'terryma/vim-multiple-cursors'

Plugin 'scrooloose/nerdtree'
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
"Plugin 'tpope/vim-fugitive'
" plugin from http://vim-scripts.org/vim/scripts.html
"Plugin 'L9'
" Git plugin not hosted on GitHub
"Plugin 'git://git.wincent.com/command-t.git'
" git repos on your local machine (i.e. when working on your own plugin)
"Plugin 'file:///home/gmarik/path/to/plugin'
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
"Plugin 'rstacruz/sparkup', {'rtp': 'vim'}
" Avoid a name conflict with L9
"Plugin 'user/L9', {'name': 'newL9'}

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
"
set nocompatible
source $VIMRUNTIME/vimrc_example.vim
source $VIMRUNTIME/mswin.vim
behave mswin
set keymodel-=stopsel
set selection=inclusive

autocmd BufEnter * silent! lcd %:p:h

set diffexpr=MyDiff()
function! MyDiff()
  let opt = '-a --binary '
  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
  let arg1 = v:fname_in
  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
  let arg2 = v:fname_new
  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
  let arg3 = v:fname_out
  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
  let eq = ''
  if $VIMRUNTIME =~ ' '
    if &sh =~ '\<cmd'
      let cmd = '""' . $VIMRUNTIME . '\diff"'
      let eq = '"'
    else
      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
    endif
  else
    let cmd = $VIMRUNTIME . '\diff'
  endif
  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3 . eq
endfunction

"Remaped/custom fuctions

"ctrl-< for previous buffer
nnoremap <C-<>   :bp<CR><F5>
inoremap <C-<>   <ESC>:bp<CR><F5>i

"ctrl-> for next buffer
nnoremap <C->>   :bn<CR><F5>
inoremap <C->>   <ESC>:bn<CR><F5>i

"ctrl-d to close buffer
nnoremap <C-d>   :bd <CR><F5>
inoremap <C-d>   <ESC>:bd<CR><F5>i

"ctrl-. for next tab
nnoremap <C-.>   :tabnext<CR><F5>
inoremap <C-.>   <ESC>:tabnext<CR><F5>i

"ctrl-, for previous tab
nnoremap <C-,>   :tabprevious<CR><F5>
inoremap <C-,>   <ESC>:tabprevious<CR><F5>i

"ctrl-t for new tab
nnoremap <C-t>   :tabnew<CR>
inoremap <C-t>   <ESC>:tabnew<CR>

"ctrl x to quit
nnoremap <C-x>   :q<CR>
inoremap <C-x>   <ESC>:x<CR>i

"ctrl-s to save
nnoremap <C-s>   :w<CR>
inoremap <C-s>   <ESC>:w<CR>

"ctrl-r to save then run filename
nnoremap <C-R>   :w<CR>:!@%<CR>
inoremap <C-R>   <ESC>:w<CR>:!@%<CR>i

" autocompletes openings
inoremap (       ()<ESC>hli
inoremap {       {}<ESC>hli
inoremap '       ''<ESC>hli
inoremap "       ""<ESC>hli
inoremap [       []<ESC>hli

" Ensures that if next char is )}] then typing those chars has no effect
inoremap <expr> ) getline('.')[col('.') -1] == ')' ? "\<Right>" : ')'
inoremap <expr> ] getline('.')[col('.') -1] == ']' ? "\<Right>" : ']'
inoremap <expr> } getline('.')[col('.') -1] == '}' ? "\<Right>" : '}'

"scrolling
nnoremap <silent> <PageDown> 3<C-E>
nnoremap <silent> <PageUp> 3<C-S-Y>

"ctrl-end/c-\ deletes till end/beginning of word
inoremap <C-End> <Esc>dwi
nnoremap <C-End> dw

inoremap <C-\> <Esc>dbi
nnoremap <C-\> db

"move line up/down
inoremap <C-'> <ESC>ddkPi
nnoremap <C-'> ddkP

inoremap <C-;> <ESC>ddpi
nnoremap <C-;> ddp

"Toggle paste:
inoremap <F11> <Esc>:set paste<CR>i
nnoremap <F11> :set paste<CR>
nnoremap <F10> :set nopaste<CR>

nnoremap <F2> :NERDTreeToggle C:/Users/Aneesh Durg/Desktop/Work/github/<CR>
inoremap <F2> <Esc>:NERDTreeToggle C:/Users/Aneesh Durg/Desktop/Work/github/<CR>
nnoremap <F2><F3> :NERDTreeToggle C:/Users/Aneesh Durg/Desktop/Work/github/<CR>
inoremap <F2><F3> <Esc>:NERDTreeToggle C:/Users/Aneesh Durg/Desktop/Work/github/<CR>

nnoremap <silent> <F5> :lchdir %:p:h<CR>:pwd<CR> 
"Sets line numbers to grey
highlight LineNr term=bold cterm=NONE ctermfg=DarkGrey ctermbg=NONE gui=NONE guifg=DarkGrey guibg=NONE